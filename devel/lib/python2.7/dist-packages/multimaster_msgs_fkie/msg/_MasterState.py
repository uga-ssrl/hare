# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multimaster_msgs_fkie/MasterState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import multimaster_msgs_fkie.msg

class MasterState(genpy.Message):
  _md5sum = "80884072ff659ac99555a763e9ba0b23"
  _type = "multimaster_msgs_fkie/MasterState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string state
multimaster_msgs_fkie/ROSMaster master

string STATE_NEW='new'
string STATE_REMOVED='removed'
string STATE_CHANGED='changed'

================================================================================
MSG: multimaster_msgs_fkie/ROSMaster
string name
# ROS Master URI
string uri
# The timestamp of the state of the remoter ROS master
float64 timestamp
# The timestamp of the state of the remoter ROS master, without the changes maked while a synchronization.
float64 timestamp_local
bool online
string discoverer_name
string monitoruri"""
  # Pseudo-constants
  STATE_NEW = r"'new'"
  STATE_REMOVED = r"'removed'"
  STATE_CHANGED = r"'changed'"

  __slots__ = ['state','master']
  _slot_types = ['string','multimaster_msgs_fkie/ROSMaster']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,master

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MasterState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = ''
      if self.master is None:
        self.master = multimaster_msgs_fkie.msg.ROSMaster()
    else:
      self.state = ''
      self.master = multimaster_msgs_fkie.msg.ROSMaster()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.master.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.master.uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2dB().pack(_x.master.timestamp, _x.master.timestamp_local, _x.master.online))
      _x = self.master.discoverer_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.master.monitoruri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.master is None:
        self.master = multimaster_msgs_fkie.msg.ROSMaster()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.name = str[start:end].decode('utf-8')
      else:
        self.master.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.uri = str[start:end].decode('utf-8')
      else:
        self.master.uri = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.master.timestamp, _x.master.timestamp_local, _x.master.online,) = _get_struct_2dB().unpack(str[start:end])
      self.master.online = bool(self.master.online)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.discoverer_name = str[start:end].decode('utf-8')
      else:
        self.master.discoverer_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.monitoruri = str[start:end].decode('utf-8')
      else:
        self.master.monitoruri = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.master.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.master.uri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2dB().pack(_x.master.timestamp, _x.master.timestamp_local, _x.master.online))
      _x = self.master.discoverer_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.master.monitoruri
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.master is None:
        self.master = multimaster_msgs_fkie.msg.ROSMaster()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.name = str[start:end].decode('utf-8')
      else:
        self.master.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.uri = str[start:end].decode('utf-8')
      else:
        self.master.uri = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.master.timestamp, _x.master.timestamp_local, _x.master.online,) = _get_struct_2dB().unpack(str[start:end])
      self.master.online = bool(self.master.online)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.discoverer_name = str[start:end].decode('utf-8')
      else:
        self.master.discoverer_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master.monitoruri = str[start:end].decode('utf-8')
      else:
        self.master.monitoruri = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
